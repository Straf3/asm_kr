Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 1
font.ASM



      1				     ; ??Ё¤?-в- п ЇаR?а ¬¬   ?агЄЁ иаЁдв  ў Ї ¬пвм ¤ЁбЇ<?п
      2	0000			     text segment 'code'
      3					  assume CS:text,DS:text
      4					  org 100h
      5
      6				     .186
      7				     ; *************** ?б-Rў- п	ЇаRж?¤га  *****************
      8	0100			     main proc far
      9	0100  E8 0232		      call Init	     ; ўллў ?¬	Ё-ЁжЁ <Ё жЁо
     10				      include TSR.inc	     ; ўЄ<оз ?¬	а?Ё¤?-в-л? ЇR¤ЇаR?а ¬¬л Ё ¤ --л?
1    11				     ; ------- Код для резидентной части ------
1    12				     ; ********** Новый	обработчик мультиплексного прерывания 2Fh **********
1    13				     ; *	   Используется	для управления программой извне.     *
1    14				     ; * Вход: АН=0CDh - перехватываемая функция.		     *
1    15				     ; *       AL: запрашиваемое действие			     *
1    16				     ; *  AL=00: проверка на установленность. Выход: AL=01: загружена	     *
1    17				     ; *  AL=01: выгрузить программу. Выход: AL=00: успех, AL=0E: неудача    *
1    18				     ; *********************************************************************
1    19	0103			      New_2Fh proc near
1    20	0103  80 FC CD		       cmp AH, 0CDh		     ; Наша функция?
1    21	0106  75 09		       jne CallStandart		     ; Нет-вызываем стандартный	обработчик
1    22	0108  3C 00		       cmp AL, 00h	     ; проверка	на установленность
1    23	010A  74 0A		       je Loaded
1    24	010C  3C 01		       cmp AL, 01h	     ; выгрузить программу
1    25	010E  74 09		       je UnLoad
1    26	0110  CF		       iret		     ; ###
1    27	0111			      CallStandart:
1    28				      ;	Используем jmp,	чтобы не связываться со	стеком.	В этом случае после
1    29				      ;	отработки системного обработчика в наш управление не возвращается.
1    30	0111  2E: FF 2E	023Ar	       jmp CS:Old_2Fh		     ; вызываем	стандартный обработчик
1    31	0116			      Loaded:
1    32	0116  B0 01		       mov AL, 01h	     ; да, прога уже установлена
1    33	0118  CF		       iret
1    34	0119			      UnLoad:			     ; выгрузить программу
1    35	0119  1E 06 53 51 52	       push DS ES BX CX	DX   ; сохраним	используемые регистры
1    36	011E  B0 0E		       mov AL, 0Eh	     ; пишем код ошибки	при выгрузке
1    37	0120  E8 002D		       call CheckIfLast		     ; проверяем, можно	ли выгружать
1    38	0123  3C 0E		       cmp AL, 0Eh	     ; нельзя-на выход
1    39	0125  74 23		       je Finish_New_2Fh
1    40				      ;	восстанавливаем	перехваченные векторы
1    41				      ;	восстанавливаем	09h
1    42	0127  B8 2509		       mov AX, 2509h	     ; 25-установка вектора, 09-номер
1    43	012A  2E: C5 16	023Er	       lds DX, CS:Old_09h    ; DS:=HIBYTE(Old_09h), DX:=LOBYTE(Old_09h)
1    44	012F  CD 21		       int 21h
1    45				      ;	восстанавливаем	2Fh
1    46	0131  B8 252F		       mov AX, 252Fh	     ; 25-установка вектора, 2F-номер
1    47	0134  2E: C5 16	023Ar	       lds DX, CS:Old_2Fh    ; DS:=HIBYTE(Old_2Fh), DX:=LOBYTE(Old_2Fh)
1    48	0139  CD 21		       int 21h
1    49				      ;	Получим	из PSP адрес собственного окружения и выгрузим его
1    50	013B  2E: 8E 06	002C	       mov ES,CS:2Ch
1    51	0140  B4 49		       mov AH, 49h	     ; функция освобождения памяти
1    52	0142  CD 21		       int 21h
1    53				      ;	а теперь выгрузим саму программу
1    54	0144  0E		       push CS
1    55	0145  07		       pop ES			     ; ES:=CS-указывает	на PSP
1    56	0146  B4 49		       mov AH, 49h	     ; функция освобождения памяти
1    57	0148  CD 21		       int 21h
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 2
font.ASM



1    58	014A			      Finish_New_2Fh:
1    59	014A  5A 59 5B 07 1F	       pop DX CX BX ES DS    ; восстанавливаем	используемые регистры
1    60	014F  CF		       iret
1    61	0150			      New_2Fh endp
1    62
1    63				     ; *********** Проверка, является ли наш вектор 09h	последним ***********
1    64				     ; *	 Только	в этом случае возможна корректная выгрузка	      *
1    65				     ; *  Т.к. код ошибки уже записан в	AL, при	невозможности выгрузки надо *
1    66				     ; *  всего	лишь пойти на выход. В противном случае-записать в AL ноль  *
1    67				     ; **********************************************************************
1    68	0150			     CheckIfLast proc
1    69				     ; получим в ES:BX адрес последнего	вектора
1    70	0150  50		      push AX			     ; сохраняем
1    71	0151  B4 35		      mov AH, 35h
1    72	0153  B0 09		      mov AL, 09h
1    73	0155  CD 21		      int 21h
1    74	0157  58		      pop AX
1    75	0158  81 FB 0169r	      cmp BX, offset New_09h
1    76	015C  75 0A		      jne FinCheck
1    77	015E  8C C1		      mov CX,ES
1    78	0160  8C CB		      mov BX,CS
1    79	0162  3B CB		      cmp CX,BX
1    80	0164  75 02		      jne FinCheck
1    81	0166  B0 00		      mov AL,00
1    82	0168			     FinCheck:
1    83	0168  C3		      ret
1    84	0169			     CheckIfLast endp
1    85
1    86				     ; *********** Новый обработчик прерывания от клавиатуры 09h ***********
1    87				     ; *	     Используется для активации	замены шрифта.		     *
1    88				     ; *********************************************************************
1    89	0169			      New_09h proc near
1    90	0169  FA		       cli
1    91	016A  9C		       pushf
1    92				       ; А здесь используем call, так как сначала вызываем системный
1    93				       ; обработчик, а потом надо перейти в наш
1    94	016B  2E: FF 1E	023Er	       call CS:Old_09h
1    95	0170  50 53 51 06	       push AX BX CX ES
1    96				       ; получим символ	из буфера
1    97	0174  B8 0040		       mov AX, 40h
1    98	0177  8E C0		       mov ES,AX	     ; по адресу 40h находятся данные БИОС
1    99	0179  26: 8B 1E	001A	       mov BX, ES:1ah		     ; адрес очередного	символа
1   100	017E  26: 8B 07		       mov AX, ES:[BX]		     ; в АХ - скан-код нажатой клавиши
1   101	0181  3D 3F00 90	       cmp AX, F5		     ; Была нажата F5?
1   102	0185  74 08		       je TwasF5			     ; Выставим	флаг в конце и офф
1   103	0187  3D 4000 90	       cmp AX, F6		     ; наша ?
1   104	018B  74 1B		       je SwapSection
1   105	018D  75 23		       jne Finish_New_09h    ; нет-на выход
1   106
1   107	018F			     TwasF5:
1   108	018F  80 3E 0242r 00	       cmp flagf5, 0
1   109	0194  75 09		       jne FlagOne
1   110	0196  C6 06 0242r 01 90	       mov flagf5, 1
1   111	019C  EB 14 90		       jmp Finish_New_09h
1   112	019F				     FlagOne:
1   113	019F  C6 06 0242r 00 90			     mov flagf5, 0
1   114	01A5  EB 0B 90				     jmp Finish_New_09h
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 3
font.ASM



1   115
1   116	01A8			     SwapSection:
1   117	01A8  80 3E 0242r 01	       cmp flagf5, 1
1   118	01AD  75 03		       jne Finish_New_09h
1   119	01AF  E8 0006		       call SwapChars		     ; да-заменяем шрифт
1   120
1   121	01B2			     Finish_New_09h:
1   122	01B2  07 59 5B 58	       pop ES CX BX AX
1   123	01B6  FB		       sti
1   124	01B7  CF		       iret
1   125	01B8			      New_09h endp
1   126
1   127				     ; ******* Процедура замены	шрифта в зависимости от	значения flag *******
1   128	01B8			     SwapChars proc near
1   129	01B8  60		      pusha
1   130	01B9  06		      push ES			     ; сохраняем регистры
1   131
1   132				      ;mov AX,0B800h ; адрес текстовой видеопамяти
1   133				      ;mov ES, AX
1   134				      ;mov Ah, flag
1   135				      ;mov Al, 0fh
1   136				      ;mov ES:1,ax   ; 0F- белый на чёрном фоне, 07-ASCII код символа
1   137
1   138	01BA  80 3E 0243r 01	      cmp flag,1
1   139	01BF  74 23		      je LoadNew
1   140	01C1  80 3E 0243r 02	      cmp flag,2
1   141	01C6  74 47		      je LoadOld
1   142				      ;	1-й раз	- сохраняем старый шрифт, потом	переходим на LoadNew
1   143	01C8  1E		      push DS
1   144	01C9  B8 1130		      mov AX,1130h
1   145	01CC  B7 01		      mov BH, 01h	     ; Получаем	адрес старого шрифта
1   146	01CE  CD 10		      int 10h
1   147				      ;	ES:BP -	адрес старого шрифта
1   148				      ;	Для movsb надо:	DS:SI-адрес источника
1   149	01D0  1E 06		      push DS ES	     ; \ меняем	содержимое
1   150	01D2  1F 07		      pop DS ES		     ; / DS и ES местами.
1   151	01D4  8B F5		      mov SI,BP
1   152	01D6  81 C6 0800	      add SI,'А'*16	     ; начальный символ
1   153	01DA  BF 0244r		      mov DI,offset buffchars
1   154				      ;	ES:DI-адрес приёмника
1   155	01DD  FC		      cld		     ; DF:=0 (двигаемся	вперёд)
1   156	01DE  B9 0050		      mov CX,16*5	     ; количество повторений
1   157	01E1  F3> A4		      rep movsb		     ; oldchar:=старый шрифт
1   158	01E3  1F		      pop DS		     ; восстанавливаем DS
1   159	01E4			     LoadNew:
1   160				      ;	рисуем символ в	верхнем	левом углу экрана
1   161	01E4  B8 B800		      mov AX,0B800h  ; адрес текстовой видеопамяти
1   162	01E7  8E C0		      mov ES, AX
1   163	01E9  26: C7 06	0000 0F07     mov ES:0,0F07h ; 0F- белый на чёрном фоне, 07-ASCII код символа
1   164
1   165	01F0  8C C8		      mov AX, CS	     ; ES:=CS
1   166	01F2  8E C0		      mov ES, AX
1   167
1   168	01F4  B8 1110		      mov AX, 1110h	     ; Загрузка	и активация шрифта
1   169	01F7  B7 10		      mov BH,16		     ; Высота символа
1   170	01F9  B3 00		      mov BL,0			     ; Блок знакогенератора
1   171	01FB  B9 0005		      mov CX,5			     ; Количество символов
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 4
font.ASM



1   172	01FE  BA 0080		      mov DX,'А'	     ; ASCII код символа А
1   173	0201  BD 02E4r		      mov BP, offset newchar ; ES:BP - адрес нового шрифта
1   174	0204  CD 10		      int 10h
1   175	0206  C6 06 0243r 02 90	      mov flag,2     ; Следующий раз надо будет	загружать старый шрифт
1   176	020C  EB 29 90		      jmp Fin
1   177
1   178	020F			     LoadOld:
1   179				      ;	рисуем символ в	верхнем	левом углу экрана
1   180	020F  B8 B800		      mov AX,0B800h  ; адрес текстовой видеопамяти
1   181	0212  8E C0		      mov ES, AX
1   182	0214  26: C7 06	0000 0F09     mov ES:0,0F09h ; 0F- белый на чёрном фоне, 09-ASCII код символа
1   183
1   184	021B  8C C8		      mov AX, CS	     ; ES:=CS
1   185	021D  8E C0		      mov ES, AX
1   186
1   187	021F  B8 1110		      mov AX, 1110h	     ; Загрузка	и активация шрифта
1   188	0222  B7 10		      mov BH,16		     ; Высота символа
1   189	0224  B3 00		      mov BL,0			     ; Блок знакогенератора
1   190	0226  B9 0005		      mov CX,5			     ; Количество символов
1   191	0229  BA 0080		      mov DX,'А'	     ; ASCII код символа А
1   192	022C  BD 0294r		      mov BP, offset oldchars	     ; ES:BP - адрес нового шрифта
1   193	022F  CD 10		      int 10h
1   194	0231  C6 06 0243r 01 90	      mov flag,1     ; Следующий раз надо будет	загружать новый	шрифт
1   195
1   196	0237			     Fin:
1   197	0237  07		      pop ES
1   198	0238  61		      popa		     ; восстанавливаем регистры
1   199	0239  C3		      ret		     ; возврат
1   200	023A			     SwapChars endp
1   201
1   202				     ; +++++++ Данные резидентной части	+++++++
1   203	023A  00000000		      Old_2Fh dd 0
1   204	023E  00000000		      Old_09h dd 0
1   205	      =4000		      F6     equ 4000h		     ; горячая клавиша
1   206	      =3F00		      F5     equ 3F00h
1   207	0242  00		      flagf5 db	0    ; 1/0=>F5 была/не была нажата
1   208	0243  00		      flag db 0		     ; 0=>1-й запуск; 1=>грузить новый шрифт; 2=>старый
1   209	0244  50*(00)		      buffchars	db 80 dup(0)	     ; буфер для старого шрифта
1   210	0294  00		     oldchars db 00000000b
1   211	0295  00			     db	00000000b
1   212	0296  00			     db	00000000b
1   213	0297  10			     db	00010000b
1   214	0298  38			     db	00111000b
1   215	0299  6C			     db	01101100b
1   216	029A  C6			     db	11000110b
1   217	029B  C6			     db	11000110b
1   218	029C  C6			     db	11000110b
1   219	029D  FE			     db	11111110b
1   220	029E  C6			     db	11000110b
1   221	029F  C6			     db	11000110b
1   222	02A0  C6			     db	11000110b
1   223	02A1  00			     db	00000000b
1   224	02A2  00			     db	00000000b
1   225	02A3  00			     db	00000000b
1   226					     ; ?
1   227	02A4  00			     db	00000000b
1   228	02A5  00			     db	00000000b
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 5
font.ASM



1   229	02A6  00			     db	00000000b
1   230	02A7  FE			     db	11111110b
1   231	02A8  66			     db	01100110b
1   232	02A9  62			     db	01100010b
1   233	02AA  7C			     db	01111100b
1   234	02AB  66			     db	01100110b
1   235	02AC  66			     db	01100110b
1   236	02AD  66			     db	01100110b
1   237	02AE  66			     db	01100110b
1   238	02AF  66			     db	01100110b
1   239	02B0  FC			     db	11111100b
1   240	02B1  00			     db	00000000b
1   241	02B2  00			     db	00000000b
1   242	02B3  00			     db	00000000b
1   243					     ; В
1   244	02B4  00			     db	00000000b
1   245	02B5  00			     db	00000000b
1   246	02B6  00			     db	00000000b
1   247	02B7  FC			     db	11111100b
1   248	02B8  66			     db	01100110b
1   249	02B9  66			     db	01100110b
1   250	02BA  66			     db	01100110b
1   251	02BB  7C			     db	01111100b
1   252	02BC  66			     db	01100110b
1   253	02BD  66			     db	01100110b
1   254	02BE  66			     db	01100110b
1   255	02BF  66			     db	01100110b
1   256	02C0  FC			     db	11111100b
1   257	02C1  00			     db	00000000b
1   258	02C2  00			     db	00000000b
1   259	02C3  00			     db	00000000b
1   260					     ; ?
1   261	02C4  00			     db	00000000b
1   262	02C5  00			     db	00000000b
1   263	02C6  00			     db	00000000b
1   264	02C7  FE			     db	11111110b
1   265	02C8  66			     db	01100110b
1   266	02C9  62			     db	01100010b
1   267	02CA  60			     db	01100000b
1   268	02CB  60			     db	01100000b
1   269	02CC  60			     db	01100000b
1   270	02CD  60			     db	01100000b
1   271	02CE  60			     db	01100000b
1   272	02CF  60			     db	01100000b
1   273	02D0  F0			     db	11110000b
1   274	02D1  00			     db	00000000b
1   275	02D2  00			     db	00000000b
1   276	02D3  00			     db	00000000b
1   277					     ; Д
1   278	02D4  00			     db	00000000b
1   279	02D5  00			     db	00000000b
1   280	02D6  00			     db	00000000b
1   281	02D7  1F			     db	00011111b
1   282	02D8  36			     db	00110110b
1   283	02D9  66			     db	01100110b
1   284	02DA  66			     db	01100110b
1   285	02DB  66			     db	01100110b
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 6
font.ASM



1   286	02DC  66			     db	01100110b
1   287	02DD  66			     db	01100110b
1   288	02DE  66			     db	01100110b
1   289	02DF  66			     db	01100110b
1   290	02E0  FF			     db	11111111b
1   291	02E1  C3			     db	11000011b
1   292	02E2  00			     db	00000000b
1   293	02E3  00			     db	00000000b
1   294					     ; А
1   295	02E4  00		     newchar db	00000000b    ; новые начертания	букв АБВГД
1   296	02E5  00			     db	00000000b
1   297	02E6  00			     db	00000000b
1   298	02E7  10			     db	00010000b
1   299	02E8  38			     db	00111000b
1   300	02E9  6C			     db	01101100b
1   301	02EA  C6			     db	11000110b
1   302	02EB  C6			     db	11000110b
1   303	02EC  C6			     db	11000110b
1   304	02ED  FE			     db	11111110b
1   305	02EE  C6			     db	11000110b
1   306	02EF  C6			     db	11000110b
1   307	02F0  C6			     db	11000110b
1   308	02F1  00			     db	00000000b
1   309	02F2  FF			     db	11111111b
1   310	02F3  00			     db	00000000b
1   311					     ; ?
1   312	02F4  00			     db	00000000b
1   313	02F5  00			     db	00000000b
1   314	02F6  00			     db	00000000b
1   315	02F7  FE			     db	11111110b
1   316	02F8  66			     db	01100110b
1   317	02F9  62			     db	01100010b
1   318	02FA  7C			     db	01111100b
1   319	02FB  66			     db	01100110b
1   320	02FC  66			     db	01100110b
1   321	02FD  66			     db	01100110b
1   322	02FE  66			     db	01100110b
1   323	02FF  66			     db	01100110b
1   324	0300  FC			     db	11111100b
1   325	0301  00			     db	00000000b
1   326	0302  FF			     db	11111111b
1   327	0303  00			     db	00000000b
1   328					     ; В
1   329	0304  00			     db	00000000b
1   330	0305  00			     db	00000000b
1   331	0306  00			     db	00000000b
1   332	0307  FC			     db	11111100b
1   333	0308  66			     db	01100110b
1   334	0309  66			     db	01100110b
1   335	030A  66			     db	01100110b
1   336	030B  7C			     db	01111100b
1   337	030C  66			     db	01100110b
1   338	030D  66			     db	01100110b
1   339	030E  66			     db	01100110b
1   340	030F  66			     db	01100110b
1   341	0310  FC			     db	11111100b
1   342	0311  00			     db	00000000b
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 7
font.ASM



1   343	0312  FF			     db	11111111b
1   344	0313  00			     db	00000000b
1   345					     ; ?
1   346	0314  00			     db	00000000b
1   347	0315  00			     db	00000000b
1   348	0316  00			     db	00000000b
1   349	0317  FE			     db	11111110b
1   350	0318  66			     db	01100110b
1   351	0319  62			     db	01100010b
1   352	031A  60			     db	01100000b
1   353	031B  60			     db	01100000b
1   354	031C  60			     db	01100000b
1   355	031D  60			     db	01100000b
1   356	031E  60			     db	01100000b
1   357	031F  60			     db	01100000b
1   358	0320  F0			     db	11110000b
1   359	0321  00			     db	00000000b
1   360	0322  FF			     db	11111111b
1   361	0323  00			     db	00000000b
1   362					     ; Д
1   363	0324  00			     db	00000000b
1   364	0325  00			     db	00000000b
1   365	0326  00			     db	00000000b
1   366	0327  1F			     db	00011111b
1   367	0328  36			     db	00110110b
1   368	0329  66			     db	01100110b
1   369	032A  66			     db	01100110b
1   370	032B  66			     db	01100110b
1   371	032C  66			     db	01100110b
1   372	032D  66			     db	01100110b
1   373	032E  66			     db	01100110b
1   374	032F  66			     db	01100110b
1   375	0330  FF			     db	11111111b
1   376	0331  C3			     db	11000011b
1   377	0332  FF			     db	11111111b
1   378	0333  00			     db	00000000b
    379	0334  CF		      iret
    380	0335			     main endp
    381
    382	      =0235		     TSRSize = $-main ;	а ¬?а а?Ё¤?-в-Rc з бвЁ
    383
    384				     include Init.inc	     ; ўЄ<оз ?¬	Ё-ЁжЁ <Ё жЁR--л? ЇR¤ЇаR?а ¬¬л Ё ¤ --л?
1   385				     ; *************** Инициализация. Выполняется первой *****************
1   386	0335			     Init proc
1   387				     ; Сначала проверяем, есть ли параметры
1   388	0335  EB 13 90		      jmp CheckParams		     ; ####
1   389	0338			     NoParams:
1   390				      ;	Проверка: запущена ли уже программа
1   391	0338  B8 CD00		      mov AX, 0CD00h	     ; перехваченная функция
1   392	033B  CD 2F		      int 2Fh
1   393	033D  3C 01		      cmp AL,1			     ; AL=1, если прога	запущена
1   394	033F  75 65		      jne Work			     ; Нет копии-переходим, наконец, к работе
1   395	0341  EB 38 90		      jmp Try2Kill   ; Уже есть	копия => просто	завершить прогу
1   396
1   397	0344			     Exit:
1   398	0344  B8 4C00		      mov AX, 4C00h
1   399	0347  CD 21		      int 21h
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 8
font.ASM



1   400	0349  C3		      ret
1   401	034A			     Init endp
1   402
1   403				     ; ************************	Процедуры для Init ************************
1   404
1   405				     ; ************************	Проверка параметров ***********************
1   406	034A			     CheckParams proc
1   407	034A  26: 8A 26	0080	      mov AH, ES:[80h]		     ; Здесь хранится длина ком. строки
1   408	034F  80 FC 00		      cmp AH, 0
1   409	0352  74 E4		      je NoParams
1   410				     ; Если параметр выгрузки, пробуем выгрузить
1   411	0354  26: 8A 26	0083	      mov AH, ES:[83h]
1   412	0359  80 FC 75 90	      cmp AH, cParamLow
1   413	035D  74 1C		      je Try2Kill
1   414	035F  80 FC 55 90	      cmp AH, cParamUp
1   415	0363  74 16		      je Try2Kill
1   416				     ; Параметр	справки
1   417	0365  80 FC 3F 90	      cmp AH, cParamHelp
1   418	0369  74 08		      je Help
1   419				     ; Иначе-выдать сообщение и	на выход
1   420	036B  BA 04B4r		      mov DX, offset sWrongParam
1   421	036E  E8 0071		      call PrintStr
1   422	0371  EB D1		      jmp Exit
1   423	0373			     CheckParams endp
1   424
1   425				     ; ************************	Вывод помощи ***********************
1   426	0373			     Help proc
1   427	0373  BA 04C7r		      mov DX, offset sHelp
1   428	0376  E8 0069		      call PrintStr
1   429	0379  EB C9		      jmp Exit
1   430	037B			     Help endp
1   431
1   432				     ; *************** Выгрузка	первой копии программы *************
1   433	037B			     Try2Kill proc
1   434				      ;	Проверка: запущена ли уже программа
1   435	037B  B8 CD00		      mov AX, 0CD00h	     ; перехваченная функция
1   436	037E  CD 2F		      int 2Fh
1   437	0380  3C 01		      cmp AL,1			     ; AL=1, если прога	запущена
1   438	0382  74 08		      je Kill			     ; загружена => выгружаем
1   439	0384  BA 0450r		      mov DX, offset sNotLoaded
1   440	0387  E8 0058		      call PrintStr
1   441	038A  EB B8		      jmp Exit
1   442	038C			     Kill:
1   443				      ;	Для выгрузки первой копии просто запускаем прерывание с	функцией 1
1   444	038C  B4 CD		      mov AH, 0CDh
1   445	038E  B0 01		      mov AL, 01h
1   446	0390  CD 2F		      int 2Fh
1   447	0392  3C 0E		      cmp AL,0Eh	     ; признак:	невозможно выгрузить
1   448	0394  75 08		      jne OK
1   449	0396  BA 03FCr		      mov DX, offset sCantKill
1   450	0399  E8 0046		      call PrintStr
1   451	039C  EB A6		      jmp Exit
1   452	039E			     OK:
1   453	039E  BA 03E7r		      mov DX, offset sKilling
1   454	03A1  E8 003E		      call PrintStr
1   455	03A4  EB 9E		      jmp Exit
1   456	03A6			     Try2Kill endp
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 9
font.ASM



1   457
1   458				     ; ************* Основная работа: установка	векторов и т.д.	************
1   459	03A6			     Work proc
1   460				      ;	Сохраняем старый вектор	2Fh
1   461	03A6  B4 35		      mov AH, 35h
1   462	03A8  B0 2F		      mov AL, 2Fh
1   463	03AA  CD 21		      int 21h
1   464	03AC  89 1E 023Ar	      mov word ptr Old_2Fh,BX
1   465	03B0  8C 06 023Cr	      mov word ptr Old_2Fh+2,ES
1   466				      ;	Установим новый	вектор 2Fh
1   467	03B4  B4 25		      mov AH, 25h
1   468	03B6  B0 2F		      mov AL, 2Fh
1   469	03B8  BA 0103r		      mov DX, offset New_2Fh
1   470	03BB  CD 21		      int 21h
1   471				      ;	Сохраняем старый вектор	09h
1   472	03BD  B4 35		      mov AH, 35h
1   473	03BF  B0 09		      mov AL, 09h
1   474	03C1  CD 21		      int 21h
1   475	03C3  89 1E 023Er	      mov word ptr Old_09h,BX	     ; Сохраняем IP
1   476	03C7  8C 06 0240r	      mov word ptr Old_09h+2,ES	     ; Сохраняем CS
1   477				      ;	Установим новый	вектор 09h0
1   478	03CB  B4 25		      mov AH, 25h
1   479	03CD  B0 09		      mov AL, 09h
1   480	03CF  BA 0169r		      mov DX, offset New_09h
1   481	03D2  CD 21		      int 21h
1   482
1   483				      ;	Завершим прогу,	оставив	часть резидентной
1   484	03D4  BA 0437r		      mov DX, offset sLoaded
1   485	03D7  E8 0008		      call PrintStr
1   486	03DA  BA 0034		      mov DX, (TSRSize+10Fh)/16	     ; Размер резидентной части	в параграфах
1   487	03DD  B8 3100		      mov AX, 3100h
1   488	03E0  CD 21		      int 21h
1   489	03E2			     Work endp
1   490
1   491				     ;	***** Процедура	вывода строки *****
1   492	03E2			     PrintStr proc near
1   493				     ; Вход: DX-смещение строки	 Выход:	отсутствует
1   494	03E2  B4 09		      mov AH, 09h	     ; функция вывода строки
1   495	03E4  CD 21		      int 21h
1   496	03E6  C3		      ret
1   497	03E7			     PrintStr endp
1   498
1   499				     ; ++++++++++ Данные для инициализации ++++++++++
1   500	03E7  82 EB A3 E0 E3 A6	A0+  sKilling db 'Выгружаю...Выгрузил!$'
    501	      EE 2E 2E 2E 82 EB	A3+
    502	      E0 E3 A7 A8 AB 21	24
1   503	03FC  8D A5 20 AC AE A3	E3+  sCantKill db 'Не могу выгрузиться!	Кто-то сел на мой вектор прерывания !$'
    504	      20 A2 EB A3 E0 E3	A7+
    505	      A8 E2 EC E1 EF 21	20+
    506	      8A E2 AE 2D E2 AE	20+
    507	      E1 A5 AB 20 AD A0	20+
    508	      AC AE A9 20 A2 A5	AA+
    509	      E2 AE E0 20 AF E0	A5+
    510	      E0 EB A2 A0 AD A8	EF+
    511	      20 21 24
1   512	0437  46 6F 6E 74 20 43	68+  sLoaded db	'Font Changer загружен.',10,13,'$'
    513	      61 6E 67 65 72 20	A7+
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 10
font.ASM



    514	      A0 A3 E0 E3 A6 A5	AD+
    515	      2E 0A 0D 24
1   516	0450  46 6F 6E 74 20 43	68+  sNotLoaded	db 'Font Changer не загружен-нечего выгружать!$'
    517	      61 6E 67 65 72 20	AD+
    518	      A5 20 A7 A0 A3 E0	E3+
    519	      A6 A5 AD 2D AD A5	E7+
    520	      A5 A3 AE 20 A2 EB	A3+
    521	      E0 E3 A6 A0 E2 EC	21+
    522	      24
1   523	047B  46 6F 6E 74 20 43	68+  sAlreadyHere db 'Font Changer уже загружен-повторная загрузка невозможна.$'
    524	      61 6E 67 65 72 20	E3+
    525	      A6 A5 20 A7 A0 A3	E0+
    526	      E3 A6 A5 AD 2D AF	AE+
    527	      A2 E2 AE E0 AD A0	EF+
    528	      20 A7 A0 A3 E0 E3	A7+
    529	      AA A0 20 AD A5 A2	AE+
    530	      A7 AC AE A6 AD A0	2E+
    531	      24
1   532	04B4  8D A5 A2 A5 E0 AD	EB+  sWrongParam db 'Неверный параметр.$'
    533	      A9 20 AF A0 E0 A0	AC+
    534	      A5 E2 E0 2E 24
1   535	04C7  82 EB A7 AE A2 20	AF+  sHelp db	     'Вызов программы: Font.com	[/u|U|?]',10,13,'Параметры u и U '
    536	      E0 AE A3 E0 A0 AC	AC+
    537	      EB 3A 20 46 6F 6E	74+
    538	      2E 63 6F 6D 20 5B	2F+
    539	      75 7C 55 7C 3F 5D	0A+
    540	      0D 8F A0 E0 A0 AC	A5+
    541	      E2 E0 EB 20 75 20	A8+
    542	      20 55 20
1   543	04FB  A8 E1 AF AE AB EC	A7+	   db	     'используются для выгрузки	уже запущенной копии.',10,13
    544	      E3 EE E2 E1 EF 20	A4+
    545	      AB EF 20 A2 EB A3	E0+
    546	      E3 A7 AA A8 20 E3	A6+
    547	      A5 20 A7 A0 AF E3	E9+
    548	      A5 AD AD AE A9 20	AA+
    549	      AE AF A8 A8 2E 0A	0D
1   550	052C  8F A0 E0 A0 AC A5	E2+	   db  'Параметр /? используется для получения этой справки.$'
    551	      E0 20 2F 3F 20 A8	E1+
    552	      AF AE AB EC A7 E3	A5+
    553	      E2 E1 EF 20 A4 AB	EF+
    554	      20 AF AE AB E3 E7	A5+
    555	      AD A8 EF 20 ED E2	AE+
    556	      A9 20 E1 AF E0 A0	A2+
    557	      AA A8 2E 24
1   558	      =003F		     cParamHelp	= '?'
1   559	      =0075		     cParamLow	= 'u'
1   560	      =0055		     cParamUp	= 'U'
    561
    562	0561			     text ends
    563				     end main
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??date				  Text	 "11/25/12"
??filename			  Text	 "font	  "
??time				  Text	 "20:09:44"
??version			  Number 040A
@Cpu				  Text	 0103H
@FileName			  Text	 font
@WordSize			  Text	 2
@curseg				  Text	 text
CallStandart			  Near	 text:0111
CheckIfLast			  Near	 text:0150
CheckParams			  Near	 text:034A
Exit				  Near	 text:0344
F5				  Number 3F00
F6				  Number 4000
Fin				  Near	 text:0237
FinCheck			  Near	 text:0168
Finish_New_09h			  Near	 text:01B2
Finish_New_2Fh			  Near	 text:014A
FlagOne				  Near	 text:019F
Help				  Near	 text:0373
Init				  Near	 text:0335
Kill				  Near	 text:038C
LoadNew				  Near	 text:01E4
LoadOld				  Near	 text:020F
Loaded				  Near	 text:0116
New_09h				  Near	 text:0169
New_2Fh				  Near	 text:0103
NoParams			  Near	 text:0338
OK				  Near	 text:039E
Old_09h				  Dword	 text:023E
Old_2Fh				  Dword	 text:023A
PrintStr			  Near	 text:03E2
SwapChars			  Near	 text:01B8
SwapSection			  Near	 text:01A8
TSRSize				  Number 0235
Try2Kill			  Near	 text:037B
TwasF5				  Near	 text:018F
UnLoad				  Near	 text:0119
Work				  Near	 text:03A6
buffchars			  Byte	 text:0244
cParamHelp			  Number 003F
cParamLow			  Number 0075
cParamUp			  Number 0055
flag				  Byte	 text:0243
flagf5				  Byte	 text:0242
main				  Far	 text:0100
newchar				  Byte	 text:02E4
oldchars			  Byte	 text:0294
sAlreadyHere			  Byte	 text:047B
sCantKill			  Byte	 text:03FC
sHelp				  Byte	 text:04C7
sKilling			  Byte	 text:03E7
sLoaded				  Byte	 text:0437
sNotLoaded			  Byte	 text:0450
Turbo Assembler	 Version 4.1	    11/25/12 20:09:44	    Page 12
Symbol Table



sWrongParam			  Byte	 text:04B4

Groups & Segments		  Bit Size Align  Combine Class

text				  16  0561 Para	  none	  code
